#    Copyright (C) 2019  Marcus Rickert
#
#    See https://github.com/marcus67/little_brother
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# This file contains a LittleBrother configuration for an optional slave host.

[LittleBrother]
# Interval in seconds between applying the rules to the collected process statistics. Default: 5
check_interval=5

# Logging level of the application. Default: INFO
# Allowed values: DEBUG, INFO, WARNING, ERROR
#log_level=DEBUG

# Run the application in debugging mode. If active any exception will print a
# stack trace and terminate the application. Do not activate in "production" mode.
# Default: False
#debug_mode=True

#[AppControl]
# Use this to replace the canonical hostname retrieved from the system. This hostname will occur in all statistics.
# Note that this name should be unique across all slaves and should not be the same name as the master. Otherwise,
# this will definitely screw things up!
#hostname = MY.BEAUTIFIED.HOSTNAME

[MasterConnector]
# URL of the master host
host_url=http://mymaster.mydomain:myport
# Unique token that identifies a slave host with the master host. It has to match the
# corresponding entry on the master host.
access_token=SOME_LONG_AND_SECRET_TOKEN

#[StatusServer]
#Use this setting on the slave if you want to monitor the slave by using the health URL.
#port=5561
#app_secret=some-secret

[Persistence]
# The slave host will work with a simple file based persistence. The file will be created in /var/spool/little-brother.
# Note that the slave(s) should ALWAYS use sqlite backend no matter which kind of backend the master will use!
database_driver=sqlite

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Note that the audio handling by the slave process is obsolete. Use the little-brother-taskbar instead.
# See https://pypi.org/project/little-brother-taskbar/
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#[AudioHandler]
# Set the volume of the audio output in percent. Default: None, hence no attempt will be made to change the setting.
#audio_mixer_volume=150
# Select the engine of the speech output.
# Permitted values:
# * google : Use the library 'python_google_speak' to generate the speech output. Note that this library requires an
#            internet connection!
# * external : Use an external command to generate the speech output. See setting 'speech_generator_cmd_line'.
# The default value is None, which deactivates spoken notifications.
#speech_engine=google

# If true, the generated files will be cached in the spool directory (see below). Default: False
#cache_audio_files = True

# Set the speed of the speech generator in words per minutes. Default: 100
# speech_words_per_minute = 80

# Set the mimimum waiting time in seconds before a spoken messages is repeated. Any request to issue the same messages
# before this time will be silently ignored. Default: 30
#mininum_waiting_time_before_repeat = 20  # seconds

# Set the directory where generated speech files will be cached. Default: /var/spool/little-brother
#spool_dir = "/tmp"

# Set the prefix of the filenames used for generated speech files. Default: little-brother-speech-
#audio_file_prefix = "my-prefix-"

# Set the path of the mixer tool. Default: /usr/bin/amixer
#audio_mixer_bin = '/bin/amixer'

# Set the default locale of the speech output if the monitored user does not have a locale configured. If both are unset
# the system default locale will be used. Default: None
#locale = de_DE

# Set the command line for the external speech generation tool.
# Default: /usr/bin/festival --tts --language american_english {inline}
# The command line may contain the following patterns will be replaced before its execution:
# * {infile} : name of a file containing the text to be spoken
# * {text}: text to be spoken
#speech_generator_cmd_line =

# Set the audio engine playing generated MPEG files.
# Available options:
#  'playsound': use library 'playsound' (default, see https://pypi.org/project/playsound/)
#  'pyglet': use library 'pyglet' (see https://pyglet.readthedocs.io/en/stable/)
#  'mpg123': use external binary 'mpg123'
#audio_player=mpg123
# Command line of the mpg123 binary. Defaults to '/usr/bin/mpg123'
#mpg123_binary=

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Note that the popup handling by the slave process is obsolete. Use the little-brother-taskbar instead.
# See https://pypi.org/project/little-brother-taskbar/
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#[PopupHandler]
# Choose the handler for showing a popup notification
# Possible values:
# * xmessage: use "apt-get install x11-utils" to install
# * gxmessage: use "apt-get install gxmessage" to install
# * zenity: use "apt-get install zenity" to install
# * yad: use "apt-get install yad" to install
# The default is None, which deactivates popup notifications.
#popup_engine=gxmessage

# Choose the encoding of the string passed to the notification tools. Defaults to "UTF-8".
#encoding=UTF-8

# Set the mimimum waiting time in seconds before a popup messages is repeated. Any request to issue the same messages
# before this time will be silently ignored. Default: 30
#mininum_waiting_time_before_repeat = 20  # seconds
